#!/bin/bash
#
# get-format-one
#
# Insert format metadata in all Vinyl albums
#
# The JSON returned from the Discogs API request looks like:
#
# "formats": [
#   {
#     "name": "Vinyl",
#     "qty": "1",
#     "text": "180 gram, Gatefold",
#     "descriptions": [
#       "LP",
#       "Album",
#       "Reissue"
#     ]
#   }
# ],
#
# Set your Discogs username and API token in ~/.config/mpprc as:
# DISCOGS_USER and DISCOGS_TOKEN
# Alternately, they can be provided on the command line or set here.
#
#-----------SET DISCOGS USERNAME-----------------------
DISCOGS_USER=
#
# Discogs API token
# See https://www.discogs.com/settings/developers
# API requests are throttled to 60 per minute for authenticated
# requests and 25 per minute for unauthenticated requests.
#
#-----------SET DISCOGS API TOKEN-----------------------
DISCOGS_TOKEN=
#
# A Discogs username is required.
#
# A Discogs API token is not required. However, API requests for
# unauthenticated users are throttled to 25 per minute and images
# are not available to unauthenticated users.

# Dot in the user configuration file if it exists
[ -f ${HOME}/.config/mpprc ] && . ${HOME}/.config/mpprc

usage() {
  printf "\nUsage: get-format-one [-F] [-N] [-U] [-u username] [-t token] [-h]"
  printf "\nWhere:"
  printf "\n\t-F indicates force overwrite of previously generated files."
  printf "\n\t-N indicates do not use a Discogs API token."
  printf "\n\t-U indicates run an update, only newly added Discogs items will be processed."
  printf "\n\t-u 'username' specifies your Discogs username."
  printf "\n\t-t 'token' specifies your Discogs API token."
  printf "\n\t-h displays this usage message and exits.\n"
  printf "\nA Discogs username is required."
  printf "\nA Discogs username and token can be added to ~/.config/mpprc as the variables"
  printf "\n\tDISCOGS_USER and DISCOGS_TOKEN"
  printf "\nor specified on the command line with '-u username' and '-t token'\n"
  printf "\nUpdates can be accomplished either with the '-U' option or '-F' option."
  printf "\nAn update scenario is when 'discogs2markdown' has previously been run"
  printf "\nbut new items have been added to the Discogs collection since then."
  printf "\nUpdating with '-U' is faster as it does not generate markdown for existing items."
  printf "\nIf both '-F' and '-U' are provided, only '-F' is used.\n\n"
  exit 1
}

overwrite=
update=
usetoken=1
# Command line arguments override config file settings
while getopts "FNUu:t:h" flag; do
    case $flag in
        F)
            overwrite=1
            ;;
        N)
            usetoken=
            ;;
        U)
            update=1
            ;;
        u)
            DISCOGS_USER="$OPTARG"
            ;;
        t)
            DISCOGS_TOKEN="$OPTARG"
            ;;
        h)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

[ "${usetoken}" ] || DISCOGS_TOKEN=
[ "${overwrite}" ] && update=

[ "${DISCOGS_USER}" ] || {
  echo "Discogs username required."
  echo "Set DISCOGS_USER in ${HOME}/.config/mpprc or on the command line."
  echo "Exiting."
  exit 1
}


TOP="${HOME}/Documents/Obsidian/Obsidian-Media-Vault/Vinyl"
URL="https://api.discogs.com/releases"
AGE="github.com/doctorfree/MusicPlayerPlus"

[ -d "${TOP}" ] || {
  echo "$TOP does not exist or is not a directory. Exiting."
  exit 1
}

for artist in ${TOP}/*
do
  [ "${artist}" == "${TOP}/*" ] && continue
  [ -d "${artist}" ] || continue
  for album in "${artist}"/*.md
  do
    [ "${album}" == "${artist}/*.md" ] && continue
    grep "^formats:" "${album}" > /dev/null || {
      release_id=`grep "Release ID:" "${album}"  | \
                  awk -F ':' ' { print $2 } ' | \
                  sed -e 's/^ *//' -e 's/ *$//'`
      [ "${release_id}" ] || continue
      formats=`echo "${album}" | sed -e "s%\.md%%"`
      [ -s "${formats}.txt" ] || {
        curl --stderr /dev/null \
          -A "${AGE}" "${URL}/${release_id}" \
          -H "Authorization: Discogs token=${DISCOGS_TOKEN}" | \
          jq -r '.formats[] | "\(.name)%\(.text)"' > "${formats}.txt"
        sleep 1
      }
      [ -s "${formats}.txt" ] || {
        echo "Empty formats file ${formats}.txt"
        rm -f "${formats}.txt"
        continue
      }

      # Insert format data for this album
      # echo "Inserting format data for ${album}"
      cat "${formats}.txt" | while read formats
      do
        [ "${formats}" ] || continue
        format=`echo "${formats}" | awk -F '%' ' { print $1 } '`
        [ "${format}" == "null" ] && format=
        text=`echo "${formats}" | awk -F '%' ' { print $2 } '`
        [ "${text}" == "null" ] && text=
        if [ "${format}" ]
        then
          if [ "${text}" ]
          then
            echo "formats: ${format}, ${text}" > /tmp/__meta__
            echo "- Formats: ${format}, ${text}" > /tmp/__data__
          else
            echo "formats: ${format}" > /tmp/__meta__
            echo "- Formats: ${format}" > /tmp/__data__
          fi
        else
          if [ "${text}" ]
          then
            echo "formats: ${text}" > /tmp/__meta__
            echo "- Formats: ${text}" > /tmp/__data__
          else
            continue
          fi
        fi
        break
      done
      [ -s /tmp/__meta__ ] && {
        sed '/format:/e cat /tmp/__meta__' "${album}" > /tmp/foo$$
      }
      [ -s /tmp/__data__ ] && {
        if [ -f /tmp/foo$$ ]
        then
          sed '/- Format:/e cat /tmp/__data__' /tmp/foo$$ > /tmp/bar$$
        else
          sed '/- Format:/e cat /tmp/__data__' "${album}" > /tmp/bar$$
        fi
      }
      if [ -f /tmp/bar$$ ]
      then
        cp /tmp/bar$$ ${album}
      else
        [ -f /tmp/foo$$ ] && cp /tmp/foo$$ ${album}
      fi
      rm -f /tmp/bar$$ /tmp/foo$$ /tmp/__meta__ /tmp/__data__ ${formats}.txt
    }
  done
done
